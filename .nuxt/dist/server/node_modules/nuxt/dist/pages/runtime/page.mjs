import { defineComponent, ref, inject, h, Suspense, Fragment } from "vue";
import { RouterView } from "vue-router";
import "C:/Users/david/IMY210/nuxt3-portfolio/nuxt-app/node_modules/defu/dist/defu.mjs";
import { RouteProvider } from "../../app/components/route-provider.mjs";
import { useNuxtApp } from "../../app/nuxt.mjs";
import { PageRouteSymbol, LayoutMetaSymbol } from "../../app/components/injections.mjs";
const __nuxt_component_1 = defineComponent({
  name: "NuxtPage",
  inheritAttrs: false,
  props: {
    name: {
      type: String
    },
    transition: {
      type: [Boolean, Object],
      default: void 0
    },
    keepalive: {
      type: [Boolean, Object],
      default: void 0
    },
    route: {
      type: Object
    },
    pageKey: {
      type: [Function, String],
      default: null
    }
  },
  setup(props, { attrs, slots, expose }) {
    const nuxtApp = useNuxtApp();
    const pageRef = ref();
    inject(PageRouteSymbol, null);
    expose({ pageRef });
    inject(LayoutMetaSymbol, null);
    nuxtApp.deferHydration();
    return () => {
      return h(RouterView, { name: props.name, route: props.route, ...attrs }, {
        default: (routeProps) => {
          return h(Suspense, { suspensible: true }, {
            default() {
              return h(RouteProvider, {
                vnode: slots.default ? normalizeSlot(slots.default, routeProps) : routeProps.Component,
                route: routeProps.route,
                vnodeRef: pageRef
              });
            }
          });
        }
      });
    };
  }
});
function normalizeSlot(slot, data) {
  const slotContent = slot(data);
  return slotContent.length === 1 ? h(slotContent[0]) : h(Fragment, void 0, slotContent);
}
export {
  __nuxt_component_1 as default
};
//# sourceMappingURL=page.mjs.map
